<?php

namespace Illuminate\Notifications\Client\Response;

abstract class SmsTrafficResponse
{
    /**
     * HTTP API result is ok.
     */
    final const RESULT_OK = 'OK';

    /**
     * HTTP API result is error.
     */
    final const RESULT_ERROR = 'ERROR';

    /**
     * Server error code
     */
    final const SERVER_ERROR_CODE = 1000;

    /**
     * Bad xml response error code
     */
    final const BAD_RESPONSE_ERROR_CODE = 1001;

    /**
     * Prepared response data
     */
    protected \SimpleXMLElement|\stdClass $data;

    /**
     * Create a new SmsTrafficResponse instance.
     */
    public function __construct(\SimpleXMLElement|\stdClass $data)
    {
        $this->data = $data;
    }

    /**
     * Check is response has error
     */
    public function hasError(): bool
    {
        return $this->getResult() === self::RESULT_ERROR || $this->getCode() > 0;
    }

    /**
     * Current error is server error
     */
    public function isServerError(): bool
    {
        return in_array($this->getCode(), [self::SERVER_ERROR_CODE, self::BAD_RESPONSE_ERROR_CODE]);
    }

    /**
     * Get error message from response
     */
    public function getErrorMessage(): string
    {
        return $this->data->description ?? $this->getErrorMessageByCode($this->getCode());
    }

    /**
     * Get response code
     */
    protected function getCode(): int
    {
        return intval($this->data->code ?? self::BAD_RESPONSE_ERROR_CODE);
    }

    /**
     * Get response result
     */
    protected function getResult(): string
    {
        return $this->data->result ?? self::RESULT_ERROR;
    }

    /**
     * Get response description
     */
    public function getDescription(): ?string
    {
        return $this->data->description ?? null;
    }

    /**
     * Get sms id from response
     */
    public function getSmsId(): ?string
    {
        return null;
    }

    /**
     * Get error message (rus) by response code
     */
    public function getErrorMessageByCode(int $code): string
    {
        return match ($code) {
            401 => 'Не указан логин',
            402 => 'Не указан пароль',
            403 => 'Не указаны номера телефонов',
            404 => 'Несовместимые параметры запроса',
            405 => 'Не указан текст сообщения',
            407 => 'Не указан ни один телефон.',
            408 => 'Неподдерживаемый тип сообщения: "тип_сообщения".',
            410 => 'Автоматическая разбивка бинарных сообщений не поддерживается.',
            411 => 'Неверный логин или пароль',
            412 => 'Неверный IP',
            413 => 'Такой группы не существует: "имя_группы".',
            414 => 'В группе нет ни одного телефона.',
            415 => 'Недостаточно средств',
            416 => 'Неверный формат даты начала рассылки: "дата_старта_рассылки".',
            417 => 'Дата начала рассылки "дата_старта_рассылки" находится в прошлом.',
            418 => 'Идентификаторы не предоставляются для отложенных сообщений.',
            419 => 'Вам не разрешено использовать данный маршрут.',
            420 => 'Слишком длинное сообщение: "текст_сообщения".',
            421 => 'Имя отправителя слишком длинное.',
            422 => 'Не указан телефон в строке "номер_строки": "строка".',
            423 => 'Пустое сообщение для телефона "номер_телефона".',
            424 => 'Сообщение "текст_сообщения" для телефона "номер_телефона" слишком длинное.',
            425 => 'Номер телефона "номер_телефона" слишком короткий. Ни одно сообщение не было отправлено.',
            426 => 'Номер телефона "номер_телефона" слишком длинный. Ни одно сообщение не было отправлено.',
            427 => '"номер_телефона": неверная длина номера телефона. Ни одно сообщение не было отправлено.',
            428 => '"номер_телефона": неверный формат номера телефона. Ни одно сообщение не было отправлено.',
            429 => '"номер_телефона": неподдерживаемый оператор. Ни одно сообщение не было отправлено.',
            430 => '"номер_телефона": неверный номер телефона. Ни одно сообщение не было отправлено.',
            432 => 'Заблокированный номер телефона: "номер_телефона". Ни одно сообщение не было отправлено.',
            433 => 'Не указан параметр sms_id.',
            434 => 'Такого сообщения нет или оно вам не принадлежит.',
            435 => 'Невозможно отменить сообщение "sms_id".',
            436 => 'Отправитель "отправитель" запрещен.',
            437 => 'Сообщение превышает 160 символов после транслитерации: "текст_сообщения".',
            438 => 'В сообщении найден шаблон, но не задана ни одна группа.',
            439 => 'Вы не можете отправлять СМС-сообщения через HTTP.',
            440 => 'Параметр "phones" не задан или задан некорректно.',
            441 => 'Неверный формат файла параметров.',
            442 => 'Неверное число параметров.',
            443 => 'Имя отправителя пустое.',
            501 => 'Время окончания рассылки - в прошлом.',
            502 => 'Время начала рассылки больше времени окончания рассылки.',
            505 => 'Список sms_ids слишком большой. Запрос на получение статусов СМС не должен содержать больше 15 идентификаторов в списке.',
            601 => 'Размер файла при загрузке в контент-храналище слишком большой (превышает установленный лимит в 3 Мб).',
            602 => 'Новый файл загрузить нельзя, т.к. квота на хранение файлов исчерпана.',
            701 => 'Формат параметра route задан неверно.',
            702 => 'Неверный формат даты начала рассылки: "дата_остановки_рассылки".',
            703 => 'Длина сообщения (параметр message) слишком большая. Ограничения: для rus=5 - 17085 байт, для rus=0 - 39015 байт.',
            704 => 'Параметр individual_messages указан некорректно.',
            705 => 'Параметр routeGroupId указан некорректно (не должен первышать 45 символов).',
            self::SERVER_ERROR_CODE => 'Временные проблемы на сервере',
            self::BAD_RESPONSE_ERROR_CODE => 'Сервер вернул некорректный ответ',
            default => 'Неизвестная ошибка',
        };
    }
}
